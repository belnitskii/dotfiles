" === Basic settings ===
source ~/.vimrc
set NERDTree
set switch
let g:switch_definitions = 'group:basic,group:java'
set ideajoin          " Smart line join
let mapleader = ' '

" === Switch mappings ===
nmap <leader>ss :Switch<CR>
nmap <leader>SS :SwitchReverse<CR>
let g:WhichKeyDesc_switch         = "<leader>ss Switch"
let g:WhichKeyDesc_switch_reverse = "<leader>ss Switch"

" === Config file ===
noremap <leader>cc :edit ~/.ideavimrc<CR>
noremap <leader>cs :source ~/.ideavimrc<CR>:nohlsearch<CR>

" === Window navigation ===
map <A-h> <C-w>h
map <A-j> <C-w>j
map <A-k> <C-w>k
map <A-l> <C-w>l

map <leader>wv <Action>(SplitVertically)
map <leader>wh <Action>(SplitHorizontally)
map <leader>ww <Action>(Unsplit)
map <leader>wa <Action>(UnsplitAll)

" === Navigation/Goto ===
map <leader>sc <Action>(GotoClass)
map <leader>sf <Action>(GotoFile)
map <leader>sa <Action>(GotoAction)
map <leader>gd <Action>(GotoDeclaration)
map <leader>gy <Action>(GotoTypeDeclaration)
map <leader>gi <Action>(GotoImplementation)
map <leader>gt <Action>(GotoTest)
map <leader>gm <Action>(GotoSuperMethod)
map <leader>gl <Action>(GotoLine)

" === Usages and info ===
map <leader>ug <Action>(FindUsages)
map <leader>uu <Action>(ShowUsages)
map <leader>vs <Action>(ViewSource)
map <leader>im <Action>(QuickImplementations)
map <leader>td <Action>(QuickTypeDefinition)
map <leader>ti <Action>(ExpressionTypeInfo)
map <leader>sh <Action>(ShowHoverInfo)
map <leader>oo <Action>(FileStructurePopup)

" === Find/Replace ===
map <S-f>      <Action>(Find)
map <leader>ff <Action>(FindInPath)
map <leader>fr <Action>(ReplaceInPath)

" === Refactoring ===
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" === Code actions ===
map <leader>aa <Action>(ShowIntentionActions)
map <leader>sw <Action>(SurroundWith)
map <S-space>  <Action>(Generate)
map <S-h>      <Action>(EditorDuplicateLines)
map <C-[>      <Action>(EditorCompleteStatement)

" === Errors and history ===
map <leader>en <Action>(GotoNextError)
map <leader>ep <Action>(GotoPreviousError)
map <leader>lc <Action>(JumpToLastChange)
map <leader>ll <Action>(RecentLocations)
map <S-k>      <Action>(Forward)
map <S-l>      <Action>(Back)
map <A-[>      <Action>(MethodUp)
map <A-]>      <Action>(MethodDown)

" === Formatting ===
map <leader><leader> <Action>(ReformatCode)
map <leader>oi       <Action>(OptimizeImports)
map <leader>ra       <Action>(RearrangeCode)

" === Moving code ===
map <C-k> <Action>(MoveLineDown)
map <C-l> <Action>(MoveLineUp)
map <C-i> <Action>(MoveStatementDown)
map <C-o> <Action>(MoveStatementUp)

" === Copy paths ===
map <leader>ca <Action>(CopyAbsolutePath)
map <leader>cn <Action>(CopyFileName)
map <leader>cp <Action>(CopyContentRootPath)

" === File operations ===
map <leader>fs <Action>(NewScratchFile)
map <leader>qq <Action>(CloseAllEditors)
map <leader>nf <Action>(NewFile)
map <leader>nd <Action>(NewDir)
map <leader>re <Action>(RenameFile)
map <leader>of <Action>(OpenFile)
map <leader>ri <Action>(RestartIde)
map <leader>nc <Action>(NewClass)
map <leader>rp <Action>(OpenProjectWindows)

" === Run/Debug ===
map <leader>cg <Action>(ChooseRunConfiguration)
map <leader>dg <Action>(ChooseDebugConfiguration)
map <leader>1  <Action>(Run)
map <leader>2  <Action>(Debug)
map <leader>0  <Action>(Stop)

let g:WhichKeyDesc_choose_run_configuration  = "<leader>cg Choose run configuration"
let g:WhichKeyDesc_choose_debug_configuration = "<leader>dg Choose debug configuration"
let g:WhichKeyDesc_run   = "<leader>1 Run"
let g:WhichKeyDesc_debug = "<leader>2 Debug"
let g:WhichKeyDesc_stop  = "<leader>0 Stop"

" === Misc ===
map <leader>rp <Action>(ManageRecentProjects)
